/*
 * This file is generated by jOOQ.
 */
package com.ninjarmm.dao.jooq;


import com.ninjarmm.dao.jooq.tables.Customer;
import com.ninjarmm.dao.jooq.tables.CustomerService;
import com.ninjarmm.dao.jooq.tables.Device;
import com.ninjarmm.dao.jooq.tables.SchemaVersion;
import com.ninjarmm.dao.jooq.tables.Service;
import com.ninjarmm.dao.jooq.tables.User;
import com.ninjarmm.dao.jooq.tables.records.CustomerRecord;
import com.ninjarmm.dao.jooq.tables.records.CustomerServiceRecord;
import com.ninjarmm.dao.jooq.tables.records.DeviceRecord;
import com.ninjarmm.dao.jooq.tables.records.SchemaVersionRecord;
import com.ninjarmm.dao.jooq.tables.records.ServiceRecord;
import com.ninjarmm.dao.jooq.tables.records.UserRecord;

import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CustomerRecord> CUSTOMERS_PK = UniqueKeys0.CUSTOMERS_PK;
    public static final UniqueKey<CustomerServiceRecord> CUSTOMER_SERVICE_PK = UniqueKeys0.CUSTOMER_SERVICE_PK;
    public static final UniqueKey<DeviceRecord> DEVICE_PK = UniqueKeys0.DEVICE_PK;
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
    public static final UniqueKey<ServiceRecord> SERVICE_PK = UniqueKeys0.SERVICE_PK;
    public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CustomerServiceRecord, CustomerRecord> CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK = ForeignKeys0.CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK;
    public static final ForeignKey<CustomerServiceRecord, ServiceRecord> CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK_1 = ForeignKeys0.CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK_1;
    public static final ForeignKey<DeviceRecord, CustomerRecord> DEVICE__DEVICES_FK = ForeignKeys0.DEVICE__DEVICES_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<CustomerRecord> CUSTOMERS_PK = Internal.createUniqueKey(Customer.CUSTOMER, "customers_pk", new TableField[] { Customer.CUSTOMER.ID }, true);
        public static final UniqueKey<CustomerServiceRecord> CUSTOMER_SERVICE_PK = Internal.createUniqueKey(CustomerService.CUSTOMER_SERVICE, "customer_service_pk", new TableField[] { CustomerService.CUSTOMER_SERVICE.ID }, true);
        public static final UniqueKey<DeviceRecord> DEVICE_PK = Internal.createUniqueKey(Device.DEVICE, "device_pk", new TableField[] { Device.DEVICE.ID }, true);
        public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = Internal.createUniqueKey(SchemaVersion.SCHEMA_VERSION, "schema_version_pk", new TableField[] { SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK }, true);
        public static final UniqueKey<ServiceRecord> SERVICE_PK = Internal.createUniqueKey(Service.SERVICE, "service_pk", new TableField[] { Service.SERVICE.ID }, true);
        public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, "user_pkey", new TableField[] { User.USER.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<CustomerServiceRecord, CustomerRecord> CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK = Internal.createForeignKey(Keys.CUSTOMERS_PK, CustomerService.CUSTOMER_SERVICE, "customer_service_fk", new TableField[] { CustomerService.CUSTOMER_SERVICE.CUSTOMERID }, true);
        public static final ForeignKey<CustomerServiceRecord, ServiceRecord> CUSTOMER_SERVICE__CUSTOMER_SERVICE_FK_1 = Internal.createForeignKey(Keys.SERVICE_PK, CustomerService.CUSTOMER_SERVICE, "customer_service_fk_1", new TableField[] { CustomerService.CUSTOMER_SERVICE.SERVICEID }, true);
        public static final ForeignKey<DeviceRecord, CustomerRecord> DEVICE__DEVICES_FK = Internal.createForeignKey(Keys.CUSTOMERS_PK, Device.DEVICE, "devices_fk", new TableField[] { Device.DEVICE.CUSTOMERID }, true);
    }
}
