/*
 * This file is generated by jOOQ.
 */
package com.ninjarmm.dao.jooq.tables.records;


import com.ninjarmm.dao.jooq.tables.Customer;
import com.ninjarmm.dao.jooq.tables.interfaces.ICustomer;

import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "customer", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "customers_pk", columnNames = {"id"})
})
public class CustomerRecord extends UpdatableRecordImpl<CustomerRecord> implements Record4<UUID, String, String, OffsetDateTime>, ICustomer {

    private static final long serialVersionUID = -1575453449;

    /**
     * Setter for <code>public.customer.id</code>.
     */
    @Override
    public CustomerRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.customer.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false)
    @Override
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.customer.name</code>.
     */
    @Override
    public CustomerRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.customer.name</code>.
     */
    @Column(name = "name")
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.customer.lastModifiedBy</code>.
     */
    @Override
    public CustomerRecord setLastmodifiedby(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.customer.lastModifiedBy</code>.
     */
    @Column(name = "lastModifiedBy")
    @Override
    public String getLastmodifiedby() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.customer.lastmodifieddatetime</code>.
     */
    @Override
    public CustomerRecord setLastmodifieddatetime(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.customer.lastmodifieddatetime</code>.
     */
    @Column(name = "lastmodifieddatetime")
    @Override
    public OffsetDateTime getLastmodifieddatetime() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Customer.CUSTOMER.ID;
    }

    @Override
    public Field<String> field2() {
        return Customer.CUSTOMER.NAME;
    }

    @Override
    public Field<String> field3() {
        return Customer.CUSTOMER.LASTMODIFIEDBY;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Customer.CUSTOMER.LASTMODIFIEDDATETIME;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getLastmodifiedby();
    }

    @Override
    public OffsetDateTime component4() {
        return getLastmodifieddatetime();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getLastmodifiedby();
    }

    @Override
    public OffsetDateTime value4() {
        return getLastmodifieddatetime();
    }

    @Override
    public CustomerRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public CustomerRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CustomerRecord value3(String value) {
        setLastmodifiedby(value);
        return this;
    }

    @Override
    public CustomerRecord value4(OffsetDateTime value) {
        setLastmodifieddatetime(value);
        return this;
    }

    @Override
    public CustomerRecord values(UUID value1, String value2, String value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICustomer from) {
        setId(from.getId());
        setName(from.getName());
        setLastmodifiedby(from.getLastmodifiedby());
        setLastmodifieddatetime(from.getLastmodifieddatetime());
    }

    @Override
    public <E extends ICustomer> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CustomerRecord
     */
    public CustomerRecord() {
        super(Customer.CUSTOMER);
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    public CustomerRecord(UUID id, String name, String lastmodifiedby, OffsetDateTime lastmodifieddatetime) {
        super(Customer.CUSTOMER);

        set(0, id);
        set(1, name);
        set(2, lastmodifiedby);
        set(3, lastmodifieddatetime);
    }
}
