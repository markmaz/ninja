/*
 * This file is generated by jOOQ.
 */
package com.ninjarmm.dao.jooq.tables.records;


import com.ninjarmm.dao.jooq.tables.Service;
import com.ninjarmm.dao.jooq.tables.interfaces.IService;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "service", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "service_pk", columnNames = {"id"})
})
public class ServiceRecord extends UpdatableRecordImpl<ServiceRecord> implements Record7<UUID, String, BigDecimal, String, BigDecimal, OffsetDateTime, String>, IService {

    private static final long serialVersionUID = -1858290899;

    /**
     * Setter for <code>public.service.id</code>.
     */
    @Override
    public ServiceRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.service.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false)
    @Override
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.service.serviceName</code>.
     */
    @Override
    public ServiceRecord setServicename(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.service.serviceName</code>.
     */
    @Column(name = "serviceName", nullable = false)
    @Override
    public String getServicename() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.service.priceForMac</code>.
     */
    @Override
    public ServiceRecord setPriceformac(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.service.priceForMac</code>.
     */
    @Column(name = "priceForMac", nullable = false)
    @Override
    public BigDecimal getPriceformac() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.service.lastModifiedBy</code>.
     */
    @Override
    public ServiceRecord setLastmodifiedby(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.service.lastModifiedBy</code>.
     */
    @Column(name = "lastModifiedBy")
    @Override
    public String getLastmodifiedby() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.service.priceForWindows</code>.
     */
    @Override
    public ServiceRecord setPriceforwindows(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.service.priceForWindows</code>.
     */
    @Column(name = "priceForWindows")
    @Override
    public BigDecimal getPriceforwindows() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.service.lastModifiedDateTime</code>.
     */
    @Override
    public ServiceRecord setLastmodifieddatetime(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.service.lastModifiedDateTime</code>.
     */
    @Column(name = "lastModifiedDateTime")
    @Override
    public OffsetDateTime getLastmodifieddatetime() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.service.comments</code>.
     */
    @Override
    public ServiceRecord setComments(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.service.comments</code>.
     */
    @Column(name = "comments")
    @Override
    public String getComments() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, BigDecimal, String, BigDecimal, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, String, BigDecimal, String, BigDecimal, OffsetDateTime, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Service.SERVICE.ID;
    }

    @Override
    public Field<String> field2() {
        return Service.SERVICE.SERVICENAME;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Service.SERVICE.PRICEFORMAC;
    }

    @Override
    public Field<String> field4() {
        return Service.SERVICE.LASTMODIFIEDBY;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Service.SERVICE.PRICEFORWINDOWS;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Service.SERVICE.LASTMODIFIEDDATETIME;
    }

    @Override
    public Field<String> field7() {
        return Service.SERVICE.COMMENTS;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getServicename();
    }

    @Override
    public BigDecimal component3() {
        return getPriceformac();
    }

    @Override
    public String component4() {
        return getLastmodifiedby();
    }

    @Override
    public BigDecimal component5() {
        return getPriceforwindows();
    }

    @Override
    public OffsetDateTime component6() {
        return getLastmodifieddatetime();
    }

    @Override
    public String component7() {
        return getComments();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getServicename();
    }

    @Override
    public BigDecimal value3() {
        return getPriceformac();
    }

    @Override
    public String value4() {
        return getLastmodifiedby();
    }

    @Override
    public BigDecimal value5() {
        return getPriceforwindows();
    }

    @Override
    public OffsetDateTime value6() {
        return getLastmodifieddatetime();
    }

    @Override
    public String value7() {
        return getComments();
    }

    @Override
    public ServiceRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ServiceRecord value2(String value) {
        setServicename(value);
        return this;
    }

    @Override
    public ServiceRecord value3(BigDecimal value) {
        setPriceformac(value);
        return this;
    }

    @Override
    public ServiceRecord value4(String value) {
        setLastmodifiedby(value);
        return this;
    }

    @Override
    public ServiceRecord value5(BigDecimal value) {
        setPriceforwindows(value);
        return this;
    }

    @Override
    public ServiceRecord value6(OffsetDateTime value) {
        setLastmodifieddatetime(value);
        return this;
    }

    @Override
    public ServiceRecord value7(String value) {
        setComments(value);
        return this;
    }

    @Override
    public ServiceRecord values(UUID value1, String value2, BigDecimal value3, String value4, BigDecimal value5, OffsetDateTime value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IService from) {
        setId(from.getId());
        setServicename(from.getServicename());
        setPriceformac(from.getPriceformac());
        setLastmodifiedby(from.getLastmodifiedby());
        setPriceforwindows(from.getPriceforwindows());
        setLastmodifieddatetime(from.getLastmodifieddatetime());
        setComments(from.getComments());
    }

    @Override
    public <E extends IService> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServiceRecord
     */
    public ServiceRecord() {
        super(Service.SERVICE);
    }

    /**
     * Create a detached, initialised ServiceRecord
     */
    public ServiceRecord(UUID id, String servicename, BigDecimal priceformac, String lastmodifiedby, BigDecimal priceforwindows, OffsetDateTime lastmodifieddatetime, String comments) {
        super(Service.SERVICE);

        set(0, id);
        set(1, servicename);
        set(2, priceformac);
        set(3, lastmodifiedby);
        set(4, priceforwindows);
        set(5, lastmodifieddatetime);
        set(6, comments);
    }
}
