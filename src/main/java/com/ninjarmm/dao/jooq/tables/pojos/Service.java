/*
 * This file is generated by jOOQ.
 */
package com.ninjarmm.dao.jooq.tables.pojos;


import com.ninjarmm.dao.jooq.tables.interfaces.IService;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "service", schema = "public", uniqueConstraints = {
    @UniqueConstraint(name = "service_pk", columnNames = {"id"})
})
public class Service implements IService {

    private static final long serialVersionUID = 461935848;

    private UUID           id;
    private String         servicename;
    private BigDecimal     priceformac;
    private String         lastmodifiedby;
    private BigDecimal     priceforwindows;
    private OffsetDateTime lastmodifieddatetime;
    private String         comments;

    public Service() {}

    public Service(IService value) {
        this.id = value.getId();
        this.servicename = value.getServicename();
        this.priceformac = value.getPriceformac();
        this.lastmodifiedby = value.getLastmodifiedby();
        this.priceforwindows = value.getPriceforwindows();
        this.lastmodifieddatetime = value.getLastmodifieddatetime();
        this.comments = value.getComments();
    }

    public Service(
        UUID           id,
        String         servicename,
        BigDecimal     priceformac,
        String         lastmodifiedby,
        BigDecimal     priceforwindows,
        OffsetDateTime lastmodifieddatetime,
        String         comments
    ) {
        this.id = id;
        this.servicename = servicename;
        this.priceformac = priceformac;
        this.lastmodifiedby = lastmodifiedby;
        this.priceforwindows = priceforwindows;
        this.lastmodifieddatetime = lastmodifieddatetime;
        this.comments = comments;
    }

    @Id
    @Column(name = "id", nullable = false)
    @Override
    public UUID getId() {
        return this.id;
    }

    @Override
    public Service setId(UUID id) {
        this.id = id;
        return this;
    }

    @Column(name = "serviceName", nullable = false)
    @Override
    public String getServicename() {
        return this.servicename;
    }

    @Override
    public Service setServicename(String servicename) {
        this.servicename = servicename;
        return this;
    }

    @Column(name = "priceForMac", nullable = false)
    @Override
    public BigDecimal getPriceformac() {
        return this.priceformac;
    }

    @Override
    public Service setPriceformac(BigDecimal priceformac) {
        this.priceformac = priceformac;
        return this;
    }

    @Column(name = "lastModifiedBy")
    @Override
    public String getLastmodifiedby() {
        return this.lastmodifiedby;
    }

    @Override
    public Service setLastmodifiedby(String lastmodifiedby) {
        this.lastmodifiedby = lastmodifiedby;
        return this;
    }

    @Column(name = "priceForWindows")
    @Override
    public BigDecimal getPriceforwindows() {
        return this.priceforwindows;
    }

    @Override
    public Service setPriceforwindows(BigDecimal priceforwindows) {
        this.priceforwindows = priceforwindows;
        return this;
    }

    @Column(name = "lastModifiedDateTime")
    @Override
    public OffsetDateTime getLastmodifieddatetime() {
        return this.lastmodifieddatetime;
    }

    @Override
    public Service setLastmodifieddatetime(OffsetDateTime lastmodifieddatetime) {
        this.lastmodifieddatetime = lastmodifieddatetime;
        return this;
    }

    @Column(name = "comments")
    @Override
    public String getComments() {
        return this.comments;
    }

    @Override
    public Service setComments(String comments) {
        this.comments = comments;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Service other = (Service) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (servicename == null) {
            if (other.servicename != null)
                return false;
        }
        else if (!servicename.equals(other.servicename))
            return false;
        if (priceformac == null) {
            if (other.priceformac != null)
                return false;
        }
        else if (!priceformac.equals(other.priceformac))
            return false;
        if (lastmodifiedby == null) {
            if (other.lastmodifiedby != null)
                return false;
        }
        else if (!lastmodifiedby.equals(other.lastmodifiedby))
            return false;
        if (priceforwindows == null) {
            if (other.priceforwindows != null)
                return false;
        }
        else if (!priceforwindows.equals(other.priceforwindows))
            return false;
        if (lastmodifieddatetime == null) {
            if (other.lastmodifieddatetime != null)
                return false;
        }
        else if (!lastmodifieddatetime.equals(other.lastmodifieddatetime))
            return false;
        if (comments == null) {
            if (other.comments != null)
                return false;
        }
        else if (!comments.equals(other.comments))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.servicename == null) ? 0 : this.servicename.hashCode());
        result = prime * result + ((this.priceformac == null) ? 0 : this.priceformac.hashCode());
        result = prime * result + ((this.lastmodifiedby == null) ? 0 : this.lastmodifiedby.hashCode());
        result = prime * result + ((this.priceforwindows == null) ? 0 : this.priceforwindows.hashCode());
        result = prime * result + ((this.lastmodifieddatetime == null) ? 0 : this.lastmodifieddatetime.hashCode());
        result = prime * result + ((this.comments == null) ? 0 : this.comments.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Service (");

        sb.append(id);
        sb.append(", ").append(servicename);
        sb.append(", ").append(priceformac);
        sb.append(", ").append(lastmodifiedby);
        sb.append(", ").append(priceforwindows);
        sb.append(", ").append(lastmodifieddatetime);
        sb.append(", ").append(comments);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IService from) {
        setId(from.getId());
        setServicename(from.getServicename());
        setPriceformac(from.getPriceformac());
        setLastmodifiedby(from.getLastmodifiedby());
        setPriceforwindows(from.getPriceforwindows());
        setLastmodifieddatetime(from.getLastmodifieddatetime());
        setComments(from.getComments());
    }

    @Override
    public <E extends IService> E into(E into) {
        into.from(this);
        return into;
    }
}
